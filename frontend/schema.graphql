# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Component {
    _id: MongoID!
    name: String
    projectComponents: [ComponentProjectComponents]
}

type ComponentProjectComponents {
    _id: MongoID
    componentId: Float
    projectRef: MongoID
}

type HoursPerAssignee {
    assignee: String
    component: String
    hours: Float
}

type HoursPerAssigneeChart {
    hours: [HoursPerAssigneeChartHours]
    labels: [String]
}

type HoursPerAssigneeChartHours {
    data: [Float]
    label: String
}

type Issue {
    _id: MongoID!
    assignee: String
    category: String
    componentRef: MongoID
    created: Date
    dueDate: Date
    epic: String
    key: String
    projectRef: MongoID
    resolutionDate: Date
    status: String
    subIssues: [IssueSubIssues]
    timeOriginalEstimate: Float
    timeSpent: Float
}

type IssueSubIssues {
    _id: MongoID
    assignee: String
    created: Date
    dueDate: Date
    key: String
    resolutionDate: Date
    status: String
    timeOriginalEstimate: Float
    timeSpent: Float
}

type LoginData {
    accessToken: String
}

type Mutation {
    login(password: String!, username: String!): LoginData
}

type Query {
    components(
        "Filter by fields"
        filter: FilterFindManyComponentInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyComponentInput
    ): [Component]
    hoursPerAssignee(dateEnd: Date = "2020-05-05T21:00:00.000Z", dateStart: Date = "2020-04-05T21:00:00.000Z"): [HoursPerAssignee]
    hoursPerAssigneeChart(dateEnd: Date = "2020-05-05T21:00:00.000Z", dateStart: Date = "2020-04-05T21:00:00.000Z"): HoursPerAssigneeChart
    issues(
        "Filter by fields"
        filter: FilterFindManyIssueInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyIssueInput
    ): [Issue]
    resourcePlan(
        "Filter by fields"
        filter: FilterFindManyResourcePlanInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyResourcePlanInput
    ): [ResourcePlan]
}

type ResourcePlan {
    _id: MongoID!
    items: [ResourcePlanItems]
    period: Date
    version: Float
}

type ResourcePlanItems {
    _id: MongoID
    assignee: String
    component: Component
    componentRef: MongoID
    hours: Float
}

enum SortFindManyComponentInput {
    _ID_ASC
    _ID_DESC
}

enum SortFindManyIssueInput {
    _ID_ASC
    _ID_DESC
}

enum SortFindManyResourcePlanInput {
    _ID_ASC
    _ID_DESC
}

input ComponentProjectComponentsInput {
    _id: MongoID
    componentId: Float
    projectRef: MongoID
}

input FilterFindManyComponentInput {
    AND: [FilterFindManyComponentInput!]
    OR: [FilterFindManyComponentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyComponentInput
    name: String
    projectComponents: [ComponentProjectComponentsInput]
}

input FilterFindManyIssueInput {
    AND: [FilterFindManyIssueInput!]
    OR: [FilterFindManyIssueInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyIssueInput
    assignee: String
    category: String
    componentRef: MongoID
    created: Date
    dueDate: Date
    epic: String
    key: String
    projectRef: MongoID
    resolutionDate: Date
    status: String
    subIssues: [IssueSubIssuesInput]
    timeOriginalEstimate: Float
    timeSpent: Float
}

input FilterFindManyResourcePlanInput {
    AND: [FilterFindManyResourcePlanInput!]
    OR: [FilterFindManyResourcePlanInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyResourcePlanInput
    items: [ResourcePlanItemsInput]
    period: Date
    version: Float
}

input IssueSubIssuesInput {
    _id: MongoID
    assignee: String
    created: Date
    dueDate: Date
    key: String
    resolutionDate: Date
    status: String
    timeOriginalEstimate: Float
    timeSpent: Float
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyComponentInput {
    _id: _idOperatorsFilterFindManyComponentInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyIssueInput {
    _id: _idOperatorsFilterFindManyIssueInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyResourcePlanInput {
    _id: _idOperatorsFilterFindManyResourcePlanInput
}

input ResourcePlanItemsInput {
    _id: MongoID
    assignee: String
    componentRef: MongoID
    hours: Float
}

input _idOperatorsFilterFindManyComponentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindManyIssueInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindManyResourcePlanInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}


scalar Date

"The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field."
scalar MongoID
